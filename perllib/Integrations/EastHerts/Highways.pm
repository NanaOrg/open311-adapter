package Integrations::EastHerts::Highways;

# Generated by SOAP::Lite (v0.715) for Perl -- soaplite.com
# Copyright (C) 2000-2006 Paul Kulchenko, Byrne Reese
# -- generated at [Fri Jul  8 14:06:41 2016]
# -- generated from http://62.232.23.238:8098/soap
my %methods = (
'GetJobsByJobNumbers' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetJobsByJobNumbers',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'JobNumbers', type => 'ro:StringArray', attr => {}),
    ], # end parameters
  }, # end GetJobsByJobNumbers
'GetJobsByExternalReference' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetJobsByExternalReference',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'ExternalReference', type => 'xs:string', attr => {}),
    ], # end parameters
  }, # end GetJobsByExternalReference
'GetJobsByStreetID' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetJobsByStreetID',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'StreetID', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'InventoryType', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'IncludeCompleted', type => 'xs:boolean', attr => {}),
      SOAP::Data->new(name => 'CompletedSince', type => 'xs:dateTime', attr => {}),
      SOAP::Data->new(name => 'ServiceCode', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'RecordTypeCode', type => 'xs:string', attr => {}),
    ], # end parameters
  }, # end GetJobsByStreetID
'AddDefect' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#AddDefect',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'Defect', type => 'ro:AddDefectStructure', attr => {}),
    ], # end parameters
  }, # end AddDefect
'AddJob' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#AddJob',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'Job', type => 'ro:AddJobStructure', attr => {}),
    ], # end parameters
  }, # end AddJob
'AddCallerToDefect' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#AddCallerToDefect',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'DefectID', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'Caller', type => 'ro:CallerStructure', attr => {}),
    ], # end parameters
  }, # end AddCallerToDefect
'GetDefectByDefectID' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetDefectByDefectID',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'DefectID', type => 'xs:string', attr => {}),
    ], # end parameters
  }, # end GetDefectByDefectID
'GetDefectsByUSRN' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetDefectsByUSRN',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'UniqueStreetReferenceNumber', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'SpecificInventoryType', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'IncludeRemedied', type => 'xs:boolean', attr => {}),
      SOAP::Data->new(name => 'RemediedSince', type => 'xs:dateTime', attr => {}),
    ], # end parameters
  }, # end GetDefectsByUSRN
'GetJobByJobNumber' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetJobByJobNumber',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'JobNumber', type => 'xs:string', attr => {}),
    ], # end parameters
  }, # end GetJobByJobNumber
'GetDefectCodes' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetDefectCodes',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
    ], # end parameters
  }, # end GetDefectCodes
'UpdateDefect' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#UpdateDefect',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'UpdateStructure', type => 'ro:UpdateDefectStructure', attr => {}),
    ], # end parameters
  }, # end UpdateDefect
'GetJobsByUSRN' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetJobsByUSRN',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'UniqueStreetReferenceNumber', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'InventoryType', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'IncludeCompleted', type => 'xs:boolean', attr => {}),
      SOAP::Data->new(name => 'CompletedSince', type => 'xs:dateTime', attr => {}),
      SOAP::Data->new(name => 'ServiceCode', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'RecordTypeCode', type => 'xs:string', attr => {}),
    ], # end parameters
  }, # end GetJobsByUSRN
'GetDefectsByStreetID' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetDefectsByStreetID',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'StreetID', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'SpecificInventoryType', type => 'xs:string', attr => {}),
      SOAP::Data->new(name => 'IncludeRemedied', type => 'xs:boolean', attr => {}),
      SOAP::Data->new(name => 'RemediedSince', type => 'xs:dateTime', attr => {}),
    ], # end parameters
  }, # end GetDefectsByStreetID
'GetDefectByExternalReference' => {
    endpoint => 'http://62.232.23.238:8098/soap',
    soapaction => 'urn:HighwaysLibrary-HighwaysService#GetDefectByExternalReference',
    namespace => 'urn:HighwaysLibrary-HighwaysService',
    parameters => [
      SOAP::Data->new(name => 'ExternalReference', type => 'xs:string', attr => {}),
    ], # end parameters
  }, # end GetDefectByExternalReference
); # end my %methods

use SOAP::Lite;
use Exporter;
use Carp ();

use vars qw(@ISA $AUTOLOAD @EXPORT_OK %EXPORT_TAGS);
@ISA = qw(Exporter SOAP::Lite);
@EXPORT_OK = (keys %methods);
%EXPORT_TAGS = ('all' => [@EXPORT_OK]);

sub _call {
    my ($self, $method) = (shift, shift);
    my $name = UNIVERSAL::isa($method => 'SOAP::Data') ? $method->name : $method;
    my %method = %{$methods{$name}};
    $self->proxy($method{endpoint} || Carp::croak "No server address (proxy) specified")
        unless $self->proxy;
    my @templates = @{$method{parameters}};
    my @parameters = ();
    foreach my $param (@_) {
        if (@templates) {
            my $template = shift @templates;
            my ($prefix,$typename) = SOAP::Utils::splitqname($template->type);
            my $method = 'as_'.$typename;
            # TODO - if can('as_'.$typename) {...}
            my $result = $self->serializer->$method($param, $template->name, $template->type, $template->attr);
            push(@parameters, $template->value($result->[2]));
        }
        else {
            push(@parameters, $param);
        }
    }
    $self->endpoint($method{endpoint})
       ->ns($method{namespace})
       ->on_action(sub{qq!"$method{soapaction}"!});
  $self->serializer->register_ns("urn:HighwaysLibrary","ro");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/mime/","mime");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/wsdl/soap/","soap");
  $self->serializer->register_ns("http://www.w3.org/2001/XMLSchema","xs");
  $self->serializer->register_ns("http://schemas.xmlsoap.org/soap/encoding/","soapenc");
  $self->serializer->register_ns("http://tempuri.org/","tns");
    my $som = $self->SUPER::call($method => @parameters);
    if ($self->want_som) {
        return $som;
    }
    UNIVERSAL::isa($som => 'SOAP::SOM') ? wantarray ? $som->paramsall : $som->result : $som;
}

sub BEGIN {
    no strict 'refs';
    for my $method (qw(want_som)) {
        my $field = '_' . $method;
        *$method = sub {
            my $self = shift->new;
            @_ ? ($self->{$field} = shift, return $self) : return $self->{$field};
        }
    }
}
no strict 'refs';
for my $method (@EXPORT_OK) {
    my %method = %{$methods{$method}};
    *$method = sub {
        my $self = UNIVERSAL::isa($_[0] => __PACKAGE__)
            ? ref $_[0]
                ? shift # OBJECT
                # CLASS, either get self or create new and assign to self
                : (shift->self || __PACKAGE__->self(__PACKAGE__->new))
            # function call, either get self or create new and assign to self
            : (__PACKAGE__->self || __PACKAGE__->self(__PACKAGE__->new));
        $self->_call($method, @_);
    }
}

sub AUTOLOAD {
    my $method = substr($AUTOLOAD, rindex($AUTOLOAD, '::') + 2);
    return if $method eq 'DESTROY' || $method eq 'want_som';
    die "Unrecognized method '$method'. List of available method(s): @EXPORT_OK\n";
}

1;
