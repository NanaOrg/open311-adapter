#!/usr/bin/env perl

BEGIN {
    use File::Basename qw(dirname);
    use File::Spec;
    my $d = dirname(File::Spec->rel2abs($0));
    require "$d/../../setenv.pl";
}

use Integrations::Whitespace;

if ($ARGV[0] eq '-h') {
    print "Usage: $0\n";
    print "This script generates the YAML for the service_mapping key of the configuration.\n";
    exit;
}

my $whitespace = Integrations::Whitespace->new(config_filename => 'bexley_whitespace');

my $services = $whitespace->GetServices;

# Find all services where the ServiceName starts with "Missed"
my @missed_services = grep { $_->{ServiceName} =~ /^Missed/ } @$services;

my %output;

for my $service (@missed_services) {
    my $service_items = $whitespace->GetServiceItems($service->{ServiceID});

    for my $service_item (@$service_items) {
        push @{ $output{$service_item->{ServiceItemName}} }, {
            service_id => $service->{ServiceID},
            service_name => $service->{ServiceName},
            service_item_id => $service_item->{ServiceItemID},
            service_item_description => $service_item->{ServiceItemDescription},
        };
    }

}

print "service_mapping:\n";
for my $service_item_name (keys %output) {
    my $service_items = $output{$service_item_name};
    my $service_item = $service_items->[0];
    print "  $service_item_name:\n";
    print "    service_item_id: " . $service_item->{service_item_id} . " # $service_item->{service_item_description}\n";
    print "    service_id: " . $service_item->{service_id} . " # $service_item->{service_name}\n";

    if (@{ $service_items } > 1) {
        print "    # Also found " . (scalar @{ $service_items } - 1) . " other related service(s):\n";

        for my $i (1 .. $#{ $service_items }) {
            my $service_item = $service_items->[$i];
            print "    # service_id: " . $service_item->{service_id} . " # $service_item->{service_name}\n";
        }
    }
}
